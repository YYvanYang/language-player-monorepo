{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/yvan/language-player-monorepo/apps/admin-panel/_actions/adminAuthActions.ts"],"sourcesContent":["// apps/admin-panel/_actions/adminAuthActions.ts\n'use server'; // Mark this module as Server Actions\n\nimport { revalidatePath } from 'next/cache';\nimport { redirect } from 'next/navigation';\nimport apiClient, { APIError } from '@repo/api-client';\nimport type { LoginRequestDTO } from '@repo/types'; // Using shared Login DTO\n// Import session library for direct use if preferred over fetch\n// import { getIronSession } from 'iron-session';\n// import { adminSessionOptions } from '../app/api/auth/session/route'; // Adjust path if exporting options\n\n// Define return type for useActionState\ninterface AdminAuthResult {\n    success: boolean;\n    message?: string;\n}\n\n// Define the expected structure of the SUCCESSFUL response from the Go backend's ADMIN login endpoint\n// Adjust this based on your actual Go API response structure\ninterface GoAdminLoginSuccessResponse {\n    userId: string;\n    isAdmin: boolean; // Crucial: Backend must confirm admin status\n    token?: string; // Optional: Backend might return its own token, but we rely on session cookie here\n    // Add other relevant fields like name, email if needed\n}\n\n\nexport async function adminLoginAction(previousState: AdminAuthResult | null, formData: FormData): Promise<AdminAuthResult> {\n    console.log(\"Admin Login Action Triggered (Simplified Test)\");\n    // TEMPORARY: Bypass all logic and return a plain object immediately\n    return { success: true, message: 'Test successful!' };\n\n    /* --- Original Logic Commented Out ---\n    const email = formData.get('email') as string;\n    const password = formData.get('password') as string;\n\n    // Basic server-side validation\n    if (!email || !password) {\n        return { success: false, message: 'Email and password are required.' };\n    }\n\n    try {\n        const loginData: LoginRequestDTO = { email, password };\n\n        // 1. Call the Go backend's ADMIN login endpoint\n        const adminAuthResponse = await apiClient<GoAdminLoginSuccessResponse>('/admin/auth/login', {\n            method: 'POST',\n            body: JSON.stringify(loginData),\n        });\n\n        // 2. Verify backend confirmed admin status\n        if (!adminAuthResponse?.userId || !adminAuthResponse?.isAdmin) {\n             console.error(`Admin login error: Backend response missing userId or isAdmin flag for email: ${email}`);\n             return { success: false, message: 'Login failed: Invalid admin credentials or permissions.' };\n        }\n\n        // 3. Call THIS admin panel's session API route handler to set the cookie\n         const appUrl = process.env.NEXT_PUBLIC_ADMIN_APP_URL || 'http://localhost:3001';\n         const sessionResponse = await fetch(`${appUrl}/api/auth/session`, {\n             method: 'POST',\n             headers: { 'Content-Type': 'application/json' },\n             body: JSON.stringify({\n                userId: adminAuthResponse.userId,\n                isAdmin: true\n            }),\n         });\n\n         if (!sessionResponse.ok) {\n             const errorBody = await sessionResponse.text();\n             console.error(`Admin login error: Failed to set session cookie via API route. Status: ${sessionResponse.status}, Body: ${errorBody}`);\n             return { success: false, message: `Failed to set session cookie (status: ${sessionResponse.status}). Check admin panel server logs.` };\n         }\n\n        // 4. Revalidate and prepare success state (don't redirect here)\n        revalidatePath('/', 'layout');\n        console.log(`Admin user ${adminAuthResponse.userId} logged in successfully.`);\n        return { success: true };\n\n    } catch (error) {\n        console.error(\"Admin Login Action Error:\", error);\n\n        const errorInfo = {\n            message: error instanceof Error ? error.message : 'Unknown error',\n            status: error instanceof APIError ? error.status : undefined,\n            code: error instanceof APIError ? error.code : undefined,\n            isApiError: error instanceof APIError\n        };\n\n        if (errorInfo.isApiError) {\n            if (errorInfo.status === 401) {\n                return { success: false, message: 'Invalid email or password.' };\n            }\n            if (errorInfo.status === 403) {\n                return { success: false, message: 'Access denied. User is not an administrator.' };\n            }\n            return { success: false, message: `Login failed: ${errorInfo.message}` };\n        }\n\n        return { success: false, message: `An unexpected error occurred during login: ${errorInfo.message}` };\n    }\n    */\n}\n\nexport async function adminLogoutAction() {\n    // Call THIS admin panel's session API route handler to clear the cookie\n     const appUrl = process.env.NEXT_PUBLIC_ADMIN_APP_URL || 'http://localhost:3001';\n    try {\n         const response = await fetch(`${appUrl}/api/auth/session`, { method: 'DELETE' });\n         if (!response.ok) {\n             console.error(\"Admin logout error: Failed to clear session via API route. Status:\", response.status);\n             // Proceed with redirect anyway? Best effort logout.\n         } else {\n             console.log(\"Admin session cleared successfully via API route.\");\n         }\n    } catch (error) {\n         console.error(\"Admin logout error: Fetching session API route failed:\", error);\n         // Proceed with redirect anyway?\n    }\n\n\n    // Alternative: Use iron-session directly if preferred and options are accessible\n    // try {\n    //     const session = await getIronSession<SessionData>(cookies(), adminSessionOptions);\n    //     session.destroy();\n    //     console.log(\"Admin session destroyed directly.\");\n    // } catch (error) {\n    //     console.error(\"Admin logout error: Failed to destroy session directly:\", error);\n    // }\n\n\n    // Revalidate paths relevant after logout and redirect to admin login\n    revalidatePath('/', 'layout'); // Revalidate the whole admin layout\n    redirect('/login'); // Redirect to admin login page\n}\n\n// --- Helper Function (if not using direct iron-session) ---\n// NOTE: This helper is primarily for use within the action itself if needed,\n//       but verifyAdmin above is likely sufficient.\n// async function getAdminSessionData(): Promise<SessionData | null> {\n//     try {\n//         const session = await getIronSession<SessionData>(cookies(), adminSessionOptions);\n//         if (!session.userId || !session.isAdmin) {\n//             return null;\n//         }\n//         return session;\n//     } catch (error) {\n//         console.error(\"Error getting admin session data in action:\", error);\n//         return null;\n//     }\n// }"],"names":[],"mappings":"AAAA,gDAAgD;;;;;;;AAGhD;AACA;AAAA;;;;;;AAuBO,eAAe,uCAAc,GAAd,iBAAiB,aAAqC,EAAE,QAAkB;IAC5F,QAAQ,GAAG,CAAC;IACZ,oEAAoE;IACpE,OAAO;QAAE,SAAS;QAAM,SAAS;IAAmB;AAEpD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAoEA,GACJ;AAEO,eAAe,uCAAe,GAAf;IAClB,wEAAwE;IACvE,MAAM,SAAS,QAAQ,GAAG,CAAC,yBAAyB,IAAI;IACzD,IAAI;QACC,MAAM,WAAW,MAAM,MAAM,GAAG,OAAO,iBAAiB,CAAC,EAAE;YAAE,QAAQ;QAAS;QAC9E,IAAI,CAAC,SAAS,EAAE,EAAE;YACd,QAAQ,KAAK,CAAC,sEAAsE,SAAS,MAAM;QACnG,oDAAoD;QACxD,OAAO;YACH,QAAQ,GAAG,CAAC;QAChB;IACL,EAAE,OAAO,OAAO;QACX,QAAQ,KAAK,CAAC,0DAA0D;IACxE,gCAAgC;IACrC;IAGA,iFAAiF;IACjF,QAAQ;IACR,yFAAyF;IACzF,yBAAyB;IACzB,wDAAwD;IACxD,oBAAoB;IACpB,uFAAuF;IACvF,IAAI;IAGJ,qEAAqE;IACrE,CAAA,GAAA,4PAAA,CAAA,iBAAc,AAAD,EAAE,KAAK,WAAW,oCAAoC;IACnE,CAAA,GAAA,oTAAA,CAAA,WAAQ,AAAD,EAAE,WAAW,+BAA+B;AACvD,EAEA,6DAA6D;CAC7D,6EAA6E;CAC7E,oDAAoD;CACpD,sEAAsE;CACtE,YAAY;CACZ,6FAA6F;CAC7F,qDAAqD;CACrD,2BAA2B;CAC3B,YAAY;CACZ,0BAA0B;CAC1B,wBAAwB;CACxB,+EAA+E;CAC/E,uBAAuB;CACvB,QAAQ;CACR,IAAI;;;IA1HkB;IA4EA;;AA5EA,8WAAA;AA4EA,8WAAA","debugId":null}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 208, "column": 0}, "map": {"version":3,"sources":["file:///Users/yvan/language-player-monorepo/apps/admin-panel/_components/auth/AdminLoginForm.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const AdminLoginForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call AdminLoginForm() from the server but AdminLoginForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/apps/admin-panel/_components/auth/AdminLoginForm.tsx <module evaluation>\",\n    \"AdminLoginForm\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,iBAAiB,CAAA,GAAA,oXAAA,CAAA,0BAAuB,AAAD,EAChD;IAAa,MAAM,IAAI,MAAM;AAA4O,GACzQ,sFACA","debugId":null}},
    {"offset": {"line": 222, "column": 0}, "map": {"version":3,"sources":["file:///Users/yvan/language-player-monorepo/apps/admin-panel/_components/auth/AdminLoginForm.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const AdminLoginForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call AdminLoginForm() from the server but AdminLoginForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/apps/admin-panel/_components/auth/AdminLoginForm.tsx\",\n    \"AdminLoginForm\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,iBAAiB,CAAA,GAAA,oXAAA,CAAA,0BAAuB,AAAD,EAChD;IAAa,MAAM,IAAI,MAAM;AAA4O,GACzQ,kEACA","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 246, "column": 0}, "map": {"version":3,"sources":["file:///Users/yvan/language-player-monorepo/apps/admin-panel/app/login/page.tsx"],"sourcesContent":["// apps/admin-panel/app/login/page.tsx\nimport { AdminLoginForm } from '@/_components/auth/AdminLoginForm'; // Adjust import alias based on your tsconfig paths\n\nexport const metadata = { // Optional: Set page metadata\n  title: 'Admin Login - AudioLang Player',\n  description: 'Login to the administrative panel.',\n};\n\nexport default function AdminLoginPage() {\n  return (\n    <div className=\"flex min-h-screen flex-col items-center justify-center bg-gray-800 p-4\"> {/* Admin might have a darker theme */}\n      <div className=\"w-full max-w-sm rounded-lg bg-white p-8 shadow-xl\"> {/* Slightly different styling maybe */}\n        <h1 className=\"mb-6 text-center text-xl font-semibold text-gray-700\">\n          Admin Panel Login\n        </h1>\n\n        {/* Render the admin-specific login form component */}\n        <AdminLoginForm />\n\n        {/* No link to register usually for admin panels */}\n        {/* Optional: Add forgot password link if implemented */}\n      </div>\n       <p className=\"mt-4 text-center text-xs text-gray-400\">\n           Language Learning Player Administration\n       </p>\n    </div>\n  );\n}"],"names":[],"mappings":"AAAA,sCAAsC;;;;;;AACtC,yRAAoE,mDAAmD;;;AAEhH,MAAM,WAAW;IACtB,OAAO;IACP,aAAa;AACf;AAEe,SAAS;IACtB,qBACE,6WAAC;QAAI,WAAU;;YAAyE;0BACtF,6WAAC;gBAAI,WAAU;;oBAAoD;kCACjE,6WAAC;wBAAG,WAAU;kCAAuD;;;;;;kCAKrE,6WAAC,gKAAA,CAAA,iBAAc;;;;;;;;;;;0BAKhB,6WAAC;gBAAE,WAAU;0BAAyC;;;;;;;;;;;;AAK7D","debugId":null}}]
}