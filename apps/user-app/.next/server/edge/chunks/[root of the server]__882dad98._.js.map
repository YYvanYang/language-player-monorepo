{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/packages/auth/src/index.ts"],"sourcesContent":["export const placeholderAuth = 'auth';\n"],"names":[],"mappings":";;;AAAO,MAAM,kBAAkB"}},
    {"offset": {"line": 33, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/apps/user-app/middleware.ts"],"sourcesContent":["// apps/user-app/middleware.ts\nimport { type NextRequest, NextResponse } from 'next/server';\nimport { getIronSession } from 'iron-session';\nimport { SessionData, getUserSessionOptions } from '@repo/auth'; // Use shared config\n\nconst sessionOptions = getUserSessionOptions();\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes, including /api/auth/session)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * - login, register (public auth pages)\n     * - tracks$ (allow public listing of tracks, but not specific actions)\n     * - collections$ (allow public listing of collections, but not specific actions)\n     * Publicly accessible pages like / or /tracks/{id} should be EXCLUDED from this matcher\n     * if they are meant to be viewable by non-logged-in users.\n     */\n    // Example: Protect user-specific pages and creation pages\n     '/profile/:path*',\n     '/collections/new', // Protect creation page\n     '/collections/edit/:path*', // Protect editing\n     '/bookmarks/:path*',\n     '/upload', // Example upload page\n     // Add other paths that strictly require login\n     // '/collections$', // Protect the user's collection list if not public\n     // '/tracks$', // If track listing has user-specific filters/views\n  ],\n};\n\nexport async function middleware(request: NextRequest) {\n  const requestedPath = request.nextUrl.pathname;\n  // console.log(`User Middleware: Checking path: ${requestedPath}`);\n\n  const response = NextResponse.next();\n  try {\n      const session = await getIronSession<SessionData>(request, response, sessionOptions);\n      const { userId } = session;\n\n      if (!userId) {\n        const loginUrl = new URL('/login', request.url);\n        loginUrl.searchParams.set('next', requestedPath);\n        // console.log(`User Middleware: No userId found for protected path ${requestedPath}, redirecting to login.`);\n        return NextResponse.redirect(loginUrl);\n      }\n\n      // console.log(`User Middleware: userId ${userId} found for path ${requestedPath}, allowing.`);\n      return response; // Allow request, session might be attached to response\n\n  } catch (error) {\n       console.error(`User Middleware Error processing path ${requestedPath}:`, error);\n       // Fallback: Redirect to login on session error\n       const loginUrl = new URL('/login', request.url);\n       loginUrl.searchParams.set('error', 'session_error');\n       return NextResponse.redirect(loginUrl);\n  }\n}"],"names":[],"mappings":"AAAA,8BAA8B;;;;;AAC9B;AAAA;AACA;AACA,+OAAiE,oBAAoB;;;;AAErF,MAAM,iBAAiB,CAAA,GAAA,wIAAA,CAAA,wBAAqB,AAAD;AAEpC,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;;;;;;KAWC,GACD,0DAA0D;QACzD;QACA;QACA;QACA;QACA;KAIF;AACH;AAEO,eAAe,WAAW,OAAoB;IACnD,MAAM,gBAAgB,QAAQ,OAAO,CAAC,QAAQ;IAC9C,mEAAmE;IAEnE,MAAM,WAAW,4TAAA,CAAA,eAAY,CAAC,IAAI;IAClC,IAAI;QACA,MAAM,UAAU,MAAM,CAAA,GAAA,oNAAA,CAAA,iBAAc,AAAD,EAAe,SAAS,UAAU;QACrE,MAAM,EAAE,MAAM,EAAE,GAAG;QAEnB,IAAI,CAAC,QAAQ;YACX,MAAM,WAAW,IAAI,IAAI,UAAU,QAAQ,GAAG;YAC9C,SAAS,YAAY,CAAC,GAAG,CAAC,QAAQ;YAClC,8GAA8G;YAC9G,OAAO,4TAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;QAC/B;QAEA,+FAA+F;QAC/F,OAAO,UAAU,uDAAuD;IAE5E,EAAE,OAAO,OAAO;QACX,QAAQ,KAAK,CAAC,CAAC,sCAAsC,EAAE,cAAc,CAAC,CAAC,EAAE;QACzE,+CAA+C;QAC/C,MAAM,WAAW,IAAI,IAAI,UAAU,QAAQ,GAAG;QAC9C,SAAS,YAAY,CAAC,GAAG,CAAC,SAAS;QACnC,OAAO,4TAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;IAClC;AACF"}}]
}