---
description:
globs:
alwaysApply: true
---
# cursor_rule: enforce_project_tailwind_v4_eslint_v9_flat_config
rule: Enforce Project-Specific Tailwind v4 & ESLint v9 Flat Config Conventions
description: |
  Ensures frontend configuration files adhere to project standards for Tailwind CSS v4 and ESLint v9 Flat Config.
  References:
  - Tailwind CSS v4 Configuration Guide for Language Player Monorepo.md
  - updated_eslint_config_mjs.md
  - https://eslint.org/blog/2025/03/flat-config-extends-define-config-global-ignores/

trigger: edit
when:
  language: [javascript, typescript, css, mjs]
  file_patterns:
    - "**/tailwind.config.{js,ts}"
    # - "**/postcss.config.mjs" # Removed: Project guide confirms this file IS needed.
    - "**/*globals.css"
    - "**/eslint.config.mjs"
    - "**/packages/eslint-config/index.mjs"
    - "**/packages/ui/src/theme.css"
    - "**/packages/ui/src/globals.css"

then:
  # ==========================
  # Tailwind v4 Checks
  # Based on: Tailwind CSS v4 Configuration Guide for Language Player Monorepo.md
  # ==========================
  - group: Tailwind CSS v4 Conventions

  - pattern: "@import\\s+\"tailwindcss\";"
    condition: # Check if it's NOT the first non-comment line
      not_match_line: 1 # Approximate check, assumes minimal comments before it
    message: |
      [Tailwind v4] `@import "tailwindcss";` MUST be the very first rule in `packages/ui/src/globals.css`.
    file_patterns: ["**/packages/ui/src/globals.css"]

  - pattern: "@tailwind\\s+(base|components|utilities);"
    message: |
      [Tailwind v4] Found legacy `@tailwind` directives. Replace `@tailwind base;`, `@tailwind components;`, and `@tailwind utilities;` with a single `@import "tailwindcss";` at the very top of `packages/ui/src/globals.css`.
    file_patterns: ["**/*globals.css"]

  - pattern: "@theme\\s*\\{[^}]*\\s+(body|html\\.dark|\\*|::before|::after)\\s*\\{" # Match CSS selectors inside @theme
    message: |
      [Tailwind v4] Found CSS selectors (like `body`, `html.dark`) inside the `@theme` block in `theme.css`. The `@theme` block should ONLY contain CSS custom property definitions (e.g., `--background: ...;`) and `@keyframes` definitions. Move CSS rules targeting elements to the `@layer base` block. (See project guide: `packages/ui/src/theme.css`)
    file_patterns: ["**/packages/ui/src/theme.css"]

  - pattern: ":root\\s*\\{[^}]*--[a-zA-Z\\-]+:" # Match CSS variable definitions outside @theme
    condition: # Only trigger if NOT inside an @theme block
      not_pattern: "@theme\\s*\\{[^}]*:root\\s*\\{[^}]*--[a-zA-Z\\-]+:[^}]*\\}"
    message: |
      [Tailwind v4] Found CSS variable definitions (like --background) potentially outside an `@theme` block in `globals.css` or `theme.css`. In Tailwind v4, custom theme values and CSS variables should be defined within `@theme { ... }` in `packages/ui/src/theme.css`. (See project guide)
    file_patterns: ["**/*globals.css", "**/packages/ui/src/theme.css"]

  - pattern: "\\s+theme:\\s*\\{\\s*(?!\\s*\\})\\s*[a-zA-Z]+:" # Match non-empty 'theme: {'
    condition: # Ignore if it only contains darkMode or plugins (or is empty)
      not_pattern: "theme:\\s*\\{\\s*(darkMode:|plugins:|\s*)\\s*\\}"
    message: |
      [Tailwind v4] Found theme customizations (colors, fonts, spacing, etc.) in `tailwind.config.ts`. In this project's v4 setup, these should be defined using CSS variables within `@theme` in `packages/ui/src/theme.css`. Keep only `content`, `darkMode`, and `plugins` in the application's `tailwind.config.ts`. (See project guide)
    file_patterns: ["**/tailwind.config.{js,ts}"]

  - pattern: "theme:\\s*\\{\\s*extend:\\s*\\{" # Match any 'theme.extend: {'
    message: |
      [Tailwind v4] Found `theme.extend` in `tailwind.config.ts`. In this project's v4 setup, extensions should generally be defined using CSS variables within `@theme` in `packages/ui/src/theme.css`. `theme.extend` is typically unnecessary unless required by a specific plugin (like keyframes/animations for `tailwindcss-animate`, though even those can go in `@theme`). Review if this block is needed. (See project guide)
    file_patterns: ["**/tailwind.config.{js,ts}"]

  # ====================================
  # ESLint v9 Flat Config Checks
  # Based on: updated_eslint_config_mjs.md & ESLint Docs/Blog
  # ====================================
  - group: ESLint v9 Flat Config Conventions

  - pattern: "FlatCompat"
    message: |
      [ESLint v9] Found `FlatCompat`. ESLint v9+ uses Flat Config natively. Refactor shared ESLint configs (`@repo/eslint-config`) to export a flat config array directly wrapped in `defineConfig`. App configs (`eslint.config.mjs`) should import this config and use `extends: [sharedConfig]` within `defineConfig` instead of using `FlatCompat`.
    file_patterns: ["**/eslint.config.mjs", "**/packages/eslint-config/index.mjs"]

  - pattern: "require\\(['\"]@repo/eslint-config"
    message: |
      [ESLint v9] Found `require('@repo/eslint-config')`. Use ESM `import eslintConfigRepo from '@repo/eslint-config';` in your `eslint.config.mjs` files. Ensure `@repo/eslint-config/index.mjs` uses `export default defineConfig([...])`.
    file_patterns: ["**/eslint.config.mjs"]

  - pattern: "\\.\\.\\.([a-zA-Z]+Config|[a-zA-Z]+)" # Match spreading of an imported config variable like ...eslintConfigRepo or ...reactConfig
    condition: # Allow spreading inside the array passed to defineConfig in the SHARED config, e.g. for tseslint
      not_pattern: "export\\s+default\\s+defineConfig\\(\\[\\s*\\.\\.\\."
      file_patterns: ["**/packages/eslint-config/index.mjs"]
    message: |
      [ESLint v9] Found direct spreading of an imported config array (`...eslintConfigRepo`) in an app's `eslint.config.mjs`. While technically possible, prefer using the `extends` property within `defineConfig` for better clarity and consistency: `defineConfig([{ extends: [eslintConfigRepo] }, { /* app overrides */ }])`. (See ESLint Blog & project guide `updated_eslint_config_mjs.md`)
    file_patterns: ["**/eslint.config.mjs"]

  - pattern: "module\\.exports\\s*="
    message: |
      [ESLint v9] Found `module.exports` in shared ESLint config (`@repo/eslint-config/index.mjs`). Flat configs must use ESM. Use `import { defineConfig } from 'eslint/config'; export default defineConfig([...]);`.
    file_patterns: ["**/packages/eslint-config/index.mjs"]

  - pattern: "export\\s+default\\s+\\[" # Matches exporting a raw array
    message: |
      [ESLint v9] Found config array exported directly (`export default [...]`). Wrap the configuration array with `defineConfig` from `eslint/config` (or `@eslint/config-helpers` for older ESLint versions) for type safety and access to features like `extends`: `import { defineConfig } from 'eslint/config'; export default defineConfig([...]);`. (See ESLint Blog & project guide `updated_eslint_config_mjs.md`)
    file_patterns: ["**/eslint.config.mjs", "**/packages/eslint-config/index.mjs"] 